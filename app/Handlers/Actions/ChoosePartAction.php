<?php

declare(strict_types=1);

namespace App\Handlers\Actions;

use App\Models\Part;
use DefStudio\Telegraph\Keyboard\Button;
use DefStudio\Telegraph\Keyboard\Keyboard;
use DefStudio\Telegraph\Models\TelegraphChat;
use Illuminate\Support\Facades\Log;

class ChoosePartAction
{
    public function execute(TelegraphChat $chat, string $partCode): void
    {
        $part = Part::query()->where('part_code', $partCode)->first();

        if (!$part) {
            $chat->markdown("–î–µ—Ç–∞–ª—å —Å –∫–æ–¥–æ–º *{$partCode}* –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")->send();
            return;
        }

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Google Drive —Å—Å—ã–ª–æ–∫
        function driveLinkToThumbnail(string $link): string
        {
            if (preg_match('#/d/([a-zA-Z0-9_-]+)#', $link, $matches)) {
                return "https://drive.google.com/thumbnail?id={$matches[1]}";
            }
            return $link;
        }

        $media = [];

        if (!empty($part->path_to_photo1)) {
            $media[] = ['type' => 'photo', 'media' => driveLinkToThumbnail($part->path_to_photo1), 'caption' => $this->buildCaption($part), 'parse_mode' => 'HTML'];
        }
        if (!empty($part->path_to_photo2)) {
            $media[] = ['type' => 'photo', 'media' => driveLinkToThumbnail($part->path_to_photo2)];
        }
        if (!empty($part->path_to_photo3)) {
            $media[] = ['type' => 'photo', 'media' => driveLinkToThumbnail($part->path_to_photo3)];
        }

        if (count($media) > 0) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ (–∏–ª–∏ –æ–¥–Ω–æ —Ñ–æ—Ç–æ)
            if (count($media) > 1) {
                $chat->mediaGroup($media)->send();
            } else {
                $chat->photo($media[0]['media'])
                    ->html($this->buildCaption($part))
                    ->send();
            }
        } else {
            // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            $chat->html($this->buildCaption($part))->send();
        }

//        $chatId = $chat->chat_id;
//        $keyboard = Keyboard::make()
//            ->buttons([
//                Button::make('üì§ –ü–µ—Ä–µ—Å–ª–∞—Ç—å –∞–¥–º–∏–Ω—É')
//                    ->action('forwardPart')
//                    ->param('message_id', $messageId)
//                    ->param('chat_id', $chatId),
//            ]);
//
//        $chat->message('–î–µ–π—Å—Ç–≤–∏—è —Å –¥–µ—Ç–∞–ª—å—é:')->keyboard($keyboard)->send();




    }

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    protected function buildCaption(Part $part): string
    {
        return "üÜî–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞:\n{$part->part_code}\n\n"
            . "üõû–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\n<b>{$part->name}</b>\n\n"
            . "üõ†Ô∏è–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å\n{$part->factory} {$part->country}\n\n"
            . "#Ô∏è‚É£–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥\n<code>{$part->original_code}</code>\n\n"
            . "üöó–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è\n<i>{$part->applicability}</i>\n\n"
            . (!empty($part->price) ? "–¶–µ–Ω–∞\n{$part->price} ‚ÇΩ\n\n" : '')
            . "<blockquote>üì∑ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–ø–∏—Å–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
üöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 7-–º–∏ –¥–Ω–µ–π
üè† –°–∞–º–æ–≤—ã–≤–æ–∑ - –≥–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞ —Å—Ç –º.–ù–∞–≥–∞—Ç–∏–Ω—Å–∫–∞—è
‚ùî –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –ª—é–±—ã–µ –≤–æ–∑–Ω–∏–∫—à–∏–µ –≤–æ–ø—Ä–æ—Å—ã</blockquote>\n\n"
            ."<a href='https://t.me/YuryShirko'>–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –Ω–∞–∂–º–∏—Ç–µ —Å—é–¥–∞</a>";
    }

}
